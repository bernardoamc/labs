#!/usr/bin/env python3

import random
from cryptography.hazmat.primitives.asymmetric.rsa import generate_private_key
from cryptography.hazmat.backends import default_backend
backend = default_backend()


def pkcs1v15_pad(message, key_bytes):
    random.seed(hash(message))
    padding_len = key_bytes - len(message) - 3
    padding = bytes([0x00, 0x02] + [random.randint(0x01, 0xff) for _ in range(padding_len)] + [0x00])
    return padding + message


def rsa_encrypt(public_key, plaintext):
    key_bytes = public_key.key_size // 8
    padded = pkcs1v15_pad(plaintext, key_bytes)
    m = int.from_bytes(padded, byteorder="big")
    e = public_key.public_numbers().e
    n = public_key.public_numbers().n
    c = pow(m, e, n)
    return int.to_bytes(c, length=key_bytes, byteorder="big")


with open("plaintexts.txt") as f:
    plaintexts = [line.strip() for line in f.readlines()]

with open("encrypted.txt", "w") as f:
    for i, plaintext in enumerate(plaintexts):
        private_key = generate_private_key(public_exponent=7, key_size=2048, backend=backend)
        public_key = private_key.public_key()
        ciphertext = rsa_encrypt(public_key, plaintext.encode())
        f.write("Message {}:\n".format(i+1))
        f.write("  n = {:x}\n".format(public_key.public_numbers().n))
        f.write("  e = {:x}\n".format(public_key.public_numbers().e))
        f.write("  c = {}\n".format(ciphertext.hex()))
        f.write("\n")
