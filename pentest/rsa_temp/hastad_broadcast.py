import gmpy
import json, binascii
from functools import reduce

def chinese_remainder(n, a):
    sum = 0
    prod = reduce(lambda a, b: a*b, n)
    for n_i, a_i in zip(n, a):
        p = prod // n_i
        sum += a_i * mul_inv(p, n_i) * p
    return sum % prod

def mul_inv(a, b):
    b0 = b
    x0, x1 = 0, 1
    if b == 1: return 1
    while a > 1:
        q = a // b
        a, b = b, a%b
        x0, x1 = x1 - q * x0, x0
    if x1 < 0: x1 += b0
    return x1


with open("encrypted.json") as dfile:
    data = json.loads(dfile.read())

data = {k:[int(d.get(k), 16) for d in data] for k in {k for d in data for k in d}}
t_to_e = chinese_remainder(data['n'], data['c'])
t = gmpy.root(t_to_e, 7)[0]
print hex(t)[2:].rstrip("L").decode("hex")
